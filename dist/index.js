"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CONTROL_KEYS = {
    ArrowUp: true,
    ArrowDown: true,
    Enter: true,
    Escape: true,
    Tab: true
};
var Autocomplete = /** @class */ (function () {
    function Autocomplete(element, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.debounceTimeout = undefined;
        this.debounceTime = 100;
        this.results = [];
        this.resultsCache = {};
        this.selectedItemIndex = 0;
        this.destroyed = false;
        this.hide = function () {
            _this.container.style.display = 'none';
        };
        this.renderItem = function (item, index) {
            var selectedClass = index === _this.selectedItemIndex ? 'is-selected' : '';
            return "\n      <div class=\"autocomplete_box-item " + selectedClass + "\" data-value=\"" + item.value + "\" data-text=\"" + item.text + "\">\n        " + item.text + "\n      </div>\n    ";
        };
        // Data handling
        this.showResults = function () {
            var currentResults = _this.resultsCache[_this.input.value];
            if (currentResults && currentResults.length) {
                // Reset everything once new data arrives
                _this.selectedItemIndex = 0;
                _this.results = currentResults;
                _this.show();
            }
            else {
                _this.hide();
            }
        };
        this.getResults = function (term) {
            if (!_this.options.query) {
                throw new Error('Autocomplete expects a "query" option to be supplied');
            }
            if (_this.resultsCache[term]) {
                _this.showResults();
            }
            else {
                _this.options.query(term, function (results) {
                    _this.resultsCache[term] = results;
                    _this.showResults();
                });
            }
        };
        // Events
        this.handleKeyup = function (event) {
            if (CONTROL_KEYS[event.key])
                return;
            if (_this.debounceTimeout)
                return;
            _this.debounceTimeout = setTimeout(function () {
                if (_this.debounceTimeout)
                    clearTimeout(_this.debounceTimeout);
                _this.debounceTimeout = undefined;
            }, _this.debounceTime);
            if (!_this.input.value) {
                _this.hide();
                return;
            }
            _this.getResults(_this.input.value);
        };
        this.handleKeydown = function (event) {
            if (!CONTROL_KEYS[event.key])
                return;
            if (event.key !== 'Tab')
                event.preventDefault();
            var lastIndex = _this.results.length - 1;
            var isLast = _this.selectedItemIndex === lastIndex;
            var isFirst = _this.selectedItemIndex === 0;
            switch (event.key) {
                case 'ArrowDown':
                    _this.selectedItemIndex = isLast ? 0 : _this.selectedItemIndex + 1;
                    _this.render();
                    break;
                case 'ArrowUp':
                    _this.selectedItemIndex = isFirst ? lastIndex : _this.selectedItemIndex - 1;
                    _this.render();
                    break;
                case 'Enter':
                    _this.handleSelect(_this.results[_this.selectedItemIndex]);
                    break;
                case 'Escape':
                case 'Tab':
                    _this.hide();
            }
        };
        this.handleClick = function (event) {
            var target = event.target;
            if (target.hasAttribute('data-value')) {
                var value = target.dataset.value;
                var text = target.dataset.text;
                if (!text || !value) {
                    throw new Error('Each option should have data-text and data-value attributes');
                }
                _this.handleSelect({ text: text, value: value });
            }
        };
        this.handleClickOutside = function (event) {
            if (event.target !== _this.input &&
                event.target !== _this.container &&
                !_this.container.contains(event.target)) {
                _this.hide();
            }
        };
        this.handleBlur = function (event) {
            // Invoke with timeout, so clicks on autocomplete options will be handled.
            setTimeout(function () { return _this.hide(); }, 0);
        };
        this.handleSelect = function (result) {
            _this.options.onSelect
                ? _this.options.onSelect(result)
                : console.warn('Autocomplete expects an "onSelect" option to be supplied');
            _this.input.value = result.text || '';
            _this.hide();
        };
        this.input = element;
        this.options = options;
        this.input.addEventListener('keyup', this.handleKeyup);
        this.input.addEventListener('keydown', this.handleKeydown);
        this.input.addEventListener('blur', this.handleBlur);
        this.container = this.initElement();
        this.container.addEventListener('click', this.handleClick);
        document.addEventListener('click', this.handleClickOutside);
    }
    Autocomplete.prototype.destroy = function () {
        if (this.destroyed)
            return;
        this.input.removeEventListener('keyup', this.handleKeyup);
        this.input.removeEventListener('keydown', this.handleKeydown);
        document.removeEventListener('click', this.handleClickOutside);
        document.body.removeChild(this.container);
        this.destroyed = true;
    };
    // Lifecycle
    Autocomplete.prototype.initElement = function () {
        var container = document.createElement('div');
        container.className = 'autocomplete_box';
        container.style.position = 'absolute';
        container.style.display = 'none';
        document.body.appendChild(container);
        return container;
    };
    Autocomplete.prototype.show = function () {
        this.render();
        this.positionContainer();
        this.container.style.display = 'block';
    };
    Autocomplete.prototype.render = function () {
        this.container.innerHTML = this.results.map(this.renderItem).join('\n');
    };
    // Rendering
    Autocomplete.prototype.positionContainer = function () {
        var elementRect = this.input.getBoundingClientRect();
        var elementHeight = parseInt(getComputedStyle(this.input).height || '0', 10);
        this.container.style.top = window.scrollY + elementRect.top + elementHeight + 'px';
        this.container.style.left = elementRect.left + 'px';
        this.container.style.right = window.innerWidth - elementRect.right + 'px';
    };
    return Autocomplete;
}());
exports.default = Autocomplete;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFZQSxJQUFNLFlBQVksR0FBaUM7SUFDakQsT0FBTyxFQUFFLElBQUk7SUFDYixTQUFTLEVBQUUsSUFBSTtJQUNmLEtBQUssRUFBRSxJQUFJO0lBQ1gsTUFBTSxFQUFFLElBQUk7SUFDWixHQUFHLEVBQUUsSUFBSTtDQUNWLENBQUE7QUFFRDtJQWNFLHNCQUFZLE9BQXlCLEVBQUUsT0FBc0I7UUFBdEIsd0JBQUEsRUFBQSxZQUFzQjtRQUE3RCxpQkFXQztRQXBCTyxvQkFBZSxHQUFZLFNBQVMsQ0FBQTtRQUNwQyxpQkFBWSxHQUFXLEdBQUcsQ0FBQTtRQUUxQixZQUFPLEdBQWtCLEVBQUUsQ0FBQTtRQUMzQixpQkFBWSxHQUFtRCxFQUFFLENBQUE7UUFDakUsc0JBQWlCLEdBQVcsQ0FBQyxDQUFBO1FBRTdCLGNBQVMsR0FBWSxLQUFLLENBQUE7UUE0QzFCLFNBQUksR0FBRztZQUNiLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDdkMsQ0FBQyxDQUFBO1FBV08sZUFBVSxHQUFHLFVBQUMsSUFBaUIsRUFBRSxLQUFhO1lBQ3BELElBQU0sYUFBYSxHQUFHLEtBQUssS0FBSyxLQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO1lBQzNFLE1BQU0sQ0FBQyxnREFDK0IsYUFBYSx3QkFBaUIsSUFBSSxDQUFDLEtBQUssdUJBQWdCLElBQUksQ0FBQyxJQUFJLHFCQUNqRyxJQUFJLENBQUMsSUFBSSx5QkFFZCxDQUFBO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsZ0JBQWdCO1FBQ1IsZ0JBQVcsR0FBRztZQUNwQixJQUFNLGNBQWMsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFD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IHRleHQ6IHN0cmluZ1xufVxudHlwZSBRdWVyeUhhbmRsZXIgPSAodGVybTogc3RyaW5nLCByZXN1bHRzU2V0dGVyOiAocmVzdWx0czogUXVlcnlSZXN1bHRbXSkgPT4gdm9pZCkgPT4gdm9pZFxudHlwZSBTZWxlY3RIYW5kbGVyID0gKHJlc3VsdDogUXVlcnlSZXN1bHQpID0+IGFueVxuXG5pbnRlcmZhY2UgSU9wdGlvbnMge1xuICBxdWVyeT86IFF1ZXJ5SGFuZGxlcixcbiAgb25TZWxlY3Q/OiBTZWxlY3RIYW5kbGVyXG59XG5cbmNvbnN0IENPTlRST0xfS0VZUzogeyBbaW5kZXg6IHN0cmluZ106IGJvb2xlYW4gfSA9IHtcbiAgQXJyb3dVcDogdHJ1ZSxcbiAgQXJyb3dEb3duOiB0cnVlLFxuICBFbnRlcjogdHJ1ZSxcbiAgRXNjYXBlOiB0cnVlLFxuICBUYWI6IHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b2NvbXBsZXRlIHtcbiAgcHJpdmF0ZSBpbnB1dDogSFRNTElucHV0RWxlbWVudFxuICBwcml2YXRlIG9wdGlvbnM6IElPcHRpb25zXG4gIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudFxuXG4gIHByaXZhdGUgZGVib3VuY2VUaW1lb3V0PzogbnVtYmVyID0gdW5kZWZpbmVkXG4gIHByaXZhdGUgZGVib3VuY2VUaW1lOiBudW1iZXIgPSAxMDBcblxuICBwcml2YXRlIHJlc3VsdHM6IFF1ZXJ5UmVzdWx0W10gPSBbXVxuICBwcml2YXRlIHJlc3VsdHNDYWNoZTogeyBbaW5kZXg6IHN0cmluZ106IFF1ZXJ5UmVzdWx0W10gfCB1bmRlZmluZWQgfSA9IHt9XG4gIHByaXZhdGUgc2VsZWN0ZWRJdGVtSW5kZXg6IG51bWJlciA9IDBcblxuICBwcml2YXRlIGRlc3Ryb3llZDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgb3B0aW9uczogSU9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuaW5wdXQgPSBlbGVtZW50XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleXVwKVxuICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bilcbiAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLmhhbmRsZUJsdXIpXG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuaW5pdEVsZW1lbnQoKVxuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaylcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGUpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHJldHVyblxuICAgIHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleXVwKVxuICAgIHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bilcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlKVxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5jb250YWluZXIpXG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlXG4gIH1cblxuICAvLyBMaWZlY3ljbGVcbiAgcHJpdmF0ZSBpbml0RWxlbWVudCgpOiBIVE1MRGl2RWxlbWVudCB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ2F1dG9jb21wbGV0ZV9ib3gnXG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpXG4gICAgcmV0dXJuIGNvbnRhaW5lclxuICB9XG5cbiAgcHJpdmF0ZSBzaG93KCkge1xuICAgIHRoaXMucmVuZGVyKClcbiAgICB0aGlzLnBvc2l0aW9uQ29udGFpbmVyKClcbiAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5yZXN1bHRzLm1hcCh0aGlzLnJlbmRlckl0ZW0pLmpvaW4oJ1xcbicpXG4gIH1cblxuICBwcml2YXRlIGhpZGUgPSAoKSA9PiB7XG4gICAgdGhpcy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICB9XG5cbiAgLy8gUmVuZGVyaW5nXG4gIHByaXZhdGUgcG9zaXRpb25Db250YWluZXIoKSB7XG4gICAgY29uc3QgZWxlbWVudFJlY3QgPSB0aGlzLmlucHV0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgZWxlbWVudEhlaWdodCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUodGhpcy5pbnB1dCkuaGVpZ2h0IHx8ICcwJywgMTApXG4gICAgdGhpcy5jb250YWluZXIuc3R5bGUudG9wID0gd2luZG93LnNjcm9sbFkgKyBlbGVtZW50UmVjdC50b3AgKyBlbGVtZW50SGVpZ2h0ICsgJ3B4J1xuICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmxlZnQgPSBlbGVtZW50UmVjdC5sZWZ0ICsgJ3B4J1xuICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gd2luZG93LmlubmVyV2lkdGggLSBlbGVtZW50UmVjdC5yaWdodCArICdweCdcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVySXRlbSA9IChpdGVtOiBRdWVyeVJlc3VsdCwgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ZWRDbGFzcyA9IGluZGV4ID09PSB0aGlzLnNlbGVjdGVkSXRlbUluZGV4ID8gJ2lzLXNlbGVjdGVkJyA6ICcnXG4gICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGVfYm94LWl0ZW0gJHtzZWxlY3RlZENsYXNzfVwiIGRhdGEtdmFsdWU9XCIke2l0ZW0udmFsdWV9XCIgZGF0YS10ZXh0PVwiJHtpdGVtLnRleHR9XCI+XG4gICAgICAgICR7aXRlbS50ZXh0fVxuICAgICAgPC9kaXY+XG4gICAgYFxuICB9XG5cbiAgLy8gRGF0YSBoYW5kbGluZ1xuICBwcml2YXRlIHNob3dSZXN1bHRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRSZXN1bHRzID0gdGhpcy5yZXN1bHRzQ2FjaGVbdGhpcy5pbnB1dC52YWx1ZV1cbiAgICBpZiAoY3VycmVudFJlc3VsdHMgJiYgY3VycmVudFJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAvLyBSZXNldCBldmVyeXRoaW5nIG9uY2UgbmV3IGRhdGEgYXJyaXZlc1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1JbmRleCA9IDBcbiAgICAgIHRoaXMucmVzdWx0cyA9IGN1cnJlbnRSZXN1bHRzXG4gICAgICB0aGlzLnNob3coKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVzdWx0cyA9ICh0ZXJtOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5xdWVyeSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdXRvY29tcGxldGUgZXhwZWN0cyBhIFwicXVlcnlcIiBvcHRpb24gdG8gYmUgc3VwcGxpZWQnKVxuICAgIH1cblxuICAgIGlmICh0aGlzLnJlc3VsdHNDYWNoZVt0ZXJtXSkge1xuICAgICAgdGhpcy5zaG93UmVzdWx0cygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3B0aW9ucy5xdWVyeSh0ZXJtLCAocmVzdWx0czogUXVlcnlSZXN1bHRbXSkgPT4ge1xuICAgICAgICB0aGlzLnJlc3VsdHNDYWNoZVt0ZXJtXSA9IHJlc3VsdHNcbiAgICAgICAgdGhpcy5zaG93UmVzdWx0cygpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIEV2ZW50c1xuICBwcml2YXRlIGhhbmRsZUtleXVwID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgaWYgKENPTlRST0xfS0VZU1tldmVudC5rZXldKSByZXR1cm5cblxuICAgIGlmICh0aGlzLmRlYm91bmNlVGltZW91dCkgcmV0dXJuXG4gICAgdGhpcy5kZWJvdW5jZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmRlYm91bmNlVGltZW91dCkgY2xlYXJUaW1lb3V0KHRoaXMuZGVib3VuY2VUaW1lb3V0KVxuICAgICAgdGhpcy5kZWJvdW5jZVRpbWVvdXQgPSB1bmRlZmluZWRcbiAgICB9LCB0aGlzLmRlYm91bmNlVGltZSlcblxuICAgIGlmICghdGhpcy5pbnB1dC52YWx1ZSkge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuZ2V0UmVzdWx0cyh0aGlzLmlucHV0LnZhbHVlKVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVLZXlkb3duID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgaWYgKCFDT05UUk9MX0tFWVNbZXZlbnQua2V5XSkgcmV0dXJuXG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ1RhYicpIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IGxhc3RJbmRleCA9IHRoaXMucmVzdWx0cy5sZW5ndGggLSAxXG4gICAgY29uc3QgaXNMYXN0ID0gdGhpcy5zZWxlY3RlZEl0ZW1JbmRleCA9PT0gbGFzdEluZGV4XG4gICAgY29uc3QgaXNGaXJzdCA9IHRoaXMuc2VsZWN0ZWRJdGVtSW5kZXggPT09IDBcblxuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbUluZGV4ID0gaXNMYXN0ID8gMCA6IHRoaXMuc2VsZWN0ZWRJdGVtSW5kZXggKyAxXG4gICAgICAgIHRoaXMucmVuZGVyKClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbUluZGV4ID0gaXNGaXJzdCA/IGxhc3RJbmRleCA6IHRoaXMuc2VsZWN0ZWRJdGVtSW5kZXggLSAxXG4gICAgICAgIHRoaXMucmVuZGVyKClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3QodGhpcy5yZXN1bHRzW3RoaXMuc2VsZWN0ZWRJdGVtSW5kZXhdKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgIHRoaXMuaGlkZSgpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDbGljayA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudFxuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKCdkYXRhLXZhbHVlJykpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0LmRhdGFzZXQudmFsdWVcbiAgICAgIGNvbnN0IHRleHQgPSB0YXJnZXQuZGF0YXNldC50ZXh0XG4gICAgICBpZiAoIXRleHQgfHwgIXZhbHVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRWFjaCBvcHRpb24gc2hvdWxkIGhhdmUgZGF0YS10ZXh0IGFuZCBkYXRhLXZhbHVlIGF0dHJpYnV0ZXMnKVxuICAgICAgfVxuICAgICAgdGhpcy5oYW5kbGVTZWxlY3QoeyB0ZXh0LCB2YWx1ZSB9KVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgaWYgKFxuICAgICAgZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmlucHV0ICYmXG4gICAgICBldmVudC50YXJnZXQgIT09IHRoaXMuY29udGFpbmVyICYmXG4gICAgICAhdGhpcy5jb250YWluZXIuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIE5vZGUpXG4gICAgKSB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQmx1ciA9IChldmVudDogRm9jdXNFdmVudCkgPT4ge1xuICAgIC8vIEludm9rZSB3aXRoIHRpbWVvdXQsIHNvIGNsaWNrcyBvbiBhdXRvY29tcGxldGUgb3B0aW9ucyB3aWxsIGJlIGhhbmRsZWQuXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmhpZGUoKSwgMClcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU2VsZWN0ID0gKHJlc3VsdDogUXVlcnlSZXN1bHQpID0+IHtcbiAgICB0aGlzLm9wdGlvbnMub25TZWxlY3RcbiAgICAgID8gdGhpcy5vcHRpb25zLm9uU2VsZWN0KHJlc3VsdClcbiAgICAgIDogY29uc29sZS53YXJuKCdBdXRvY29tcGxldGUgZXhwZWN0cyBhbiBcIm9uU2VsZWN0XCIgb3B0aW9uIHRvIGJlIHN1cHBsaWVkJylcbiAgICB0aGlzLmlucHV0LnZhbHVlID0gcmVzdWx0LnRleHQgfHwgJydcbiAgICB0aGlzLmhpZGUoKVxuICB9XG59XG4iXX0=